#summary Developers Info
#labels

This is not a general !SportTracks plugin description. See for instance [http://www.zonefivesoftware.com/SportTracks/Forums/viewtopic.php?t=4828 here] for more information about developing ST plugins.

Some specific notes for gps-running plugins:

===Getting Started===
The ST plugin API is described on the !SportTracks site. Please sign up to the Developer Network before working with ST plugins (legal requirement). 
http://www.zonefivesoftware.com/sporttracks/developers/

MS Visual Studio Express 2010 is used, but at the time of conversion, VSE 2008 would happily work with the projects. The solution file can be considered as a template only (use your own copy) and is in VSE 2008 format.
 
This project is adapted to be used without user changes. To achieve this in a simple way, the common paths etc are separated to a common file:
  # Program paths etc uses environment variables
  # Some common build actions (a few common files)
  # Build actions like creating .st3plugin
  # References to !SportTacks libraries etc are dependent on the ST version

The same setup can be used in other plugins too, done in !MiscPlugin, !ST2Funbeat, Trails, !ActivityPicture, !NordicMaps (hitta.se), ApplyRoutes and Matrix (on CodePlex), as well as patches for exportcrs, HTML Export Plugin and CSV import. See one of the project files as an example. 
Each .csproj contains a few specific settings and the specific files for the plugin only. The common setting files are imported.
The plugin GUID must be added manually. The GlobalSection in the .sln must be updated manually (you probably want to use your own .sln file, copy the file in the project).

Note the following issues with the setup:
  # At startup, VSE warns that files are imported (can be avoided by adjusting the registry).
  # There are build warnings that all references cannot be found at builds (if ST2 and ST3 are supported).
  # You must adjust the Solution properties when using a configuration the first time, otherwise your project will not be build.
  
This solution was contributed by old_man_biking on the !SportTracks forum.

===SportTracks 2===
Until December 2010, the plugin supported both ST2 and ST3. Where there was a difference, the code was compiled with "#ifdef ST_2_1". Many new functions only works with ST2, but the code base is the same.
The ST2 specific code may be removed. To continue the ST2 builds, use the last ST2 commit or renable the ST2 build:
 * ST references in Common/Common-References.csproj
 * Re-add ST2 configurations in the .sln file

===Install packages===
The build event copies the built files to "%ALLUSERSPROFILE%\!ZoneFiveSoftware\!SportTracks\2.0\Plugins\Update" (similar for ST3) automatically, so you can have ST running while building, just restart when you want to use the new binaries.
The build event also creates .st2plugin packages. This should be automatic if you have 7-zip installed in the standard location, otherwise edit the paths.

===Translations===
The master copy for translations is done in a Spreadsheet, the .resx files are generated from the source. The master Resources.resx and !StringResources.resx files must be updated correctly for each plugin, the i18.pl script described below updates the translations with the info from the spread sheet.

The generally used "master copy" of the spreadsheet is a Google Spreadsheet document. 
https://spreadsheets.google.com/ccc?key=tNZna7OU_2RlRYv5Iv_csgg
The spreadsheet contains several plugins, all with a separate sheet.

Note: The i18.pl script could previously pull the spereadsheet contents automatically. However, this is not working right now after Google changed the API. This may be fixable with some SSL handling and user agents in the script, but right now one step must be done manually.

Instructions:
  # Update Resources and !StringResources in the plugins correctly. 
  # Add all master strings and the master language to the spreadsheet. All fields in the plugin must be included here, the script below will not change the "master" .resx, each translation will have the same fields as the master.
Another way to express this: The English strings in the second column is not pushed to the .resx files at generation.
To keep the .resx and spreadsheet consistent, diff the column contents. (I used a !OpenOffice script for this, but this is not working to my liking when saving in Excel format.)
  # Some hopefully temporary handling, could be handled by the script.
    # Save a .xls (possibly changed to .ods) in the repository.
	(all plugins use same spreadsheet) https://spreadsheets.google.com/ccc?key=tNZna7OU_2RlRYv5Iv_csgg&output=xls
    # Save the file in .csv format, Field separation ",", specify the character format to be in UTF-8 (important!). These settings are default in Google SpreadSheet, but may have to be adjusted in OpenOffice/Excel.
		For GPS-Running (gid param differs): https://spreadsheets.google.com/ccc?key=tNZna7OU_2RlRYv5Iv_csgg&output=csv#gid=0
		or
		https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=tNZna7OU_2RlRYv5Iv_csgg&outputFormat=csv#gid=0

  # The script that updates translations is  written by ST user markw65 (post about this in the [http://www.zonefivesoftware.com/SportTracks/Forums/viewtopic.php?p=34501#34501 invitational ST developers forum] and used in the !ApplyRoutes plugin, with minor additions. The script is written in perl. I use the script in Cygwin, but other perl versions should work too (strawberry Perl is known to be working). The script requires some perl modules like XML::Simple. You will get messages when running it...
  # Check the script util/i18n.pl, to see how to adapt inparameters as paths. Example how I run it from the trunk directory:
 {{{$ util/i18n.pl file:g:/Users/go/dev/gc/gps-running/Resources.csv .}}}
 
===Util===
Some code (and part of the translation) is shared between the plugins. Not in a separate library but in duplicated code (only the namespace differs). A simple script is used to copy and replace namespace. (There is a problem making this to a library, as there is a reference to the application.) A simple shell script (run in Cygwin) that copies .cs and !StringResources.resx from a "master" plugin to the others and updates namespace is available: 
{{{$ util/cputil.sh PerformancePredictor}}}

===Problems===
